== Declarations and Inclusions ==
Title: Include Servo

Instructions: Include the Servo library by utilizing the <code class="prettyprint lang-cpp">#include</code> keyword.This will grant us access to a list of Servo commands to tell our Servo what to do. <br /><br /> We will also declare (but not create) a Servo object called ServoGripper. We will create that new Servo later.

Code:
#include <Servo.h>
Servo ServoGripper;

Quiz:
To include another library from a file called Math.h, what would you type?
    #include <Math.h>
To declare a variable called SportsCar, of object type Car, what would you type?
    Car SportsCar;
    Car SportsCar



Title: Create Macros

Instructions: Use the <code class="prettyprint lang-cpp">#define</code> keyword to create a new macro, which works like a variable, but doesn't use any computer memory to store as it will be replaced when we compile the code. Wherever the compiler sees the macro name, it will just replace the name with the value we specified here. We will be creating the following macros: <ul><li><code class="prettyprint lang-cpp">Degree_Stop_1</code> - This is the angle the motor will rotate to when the claw is closed.</li><li><code class="prettyprint lang-cpp">Degree_Stop_2</code> - This is the angle the motor will rotate to when the claw is open.</li><li><code class="prettyprint lang-cpp">Close_Threshold</code> - EMG value that must be picked up by monitor in order to close the hand, by rotating the motor to the angle specific in Degree_Stop_1.</li></ul>

Code:
#define Degree_Stop_1 110

Quiz:
If you wanted to define Degree_Stop_1 as 120 degrees, what would you type?
    #define Degree_Stop_1 120
If you wanted to define Degree_Stop_2 as 70 degrees, what would you type?
    #define Degree_Stop_2 70
If you wanted to define Close_Threshold as 50, what would you type?
    #define Close_Threshold 50
Scenario: When you clench your fist and your claw closes, it does not close all the way. Which macro value would you change to fix that?
    Degree_Stop_1
Scenario: When you relax your arm and the claw opens, it does not open wide enough to grab the object you are trying to pick up. Which macro value would you change?
    Degree_Stop_2 
Scenario: Even though you are clenching your fist, the claw is not closing. Which macro value would you change?
    Close_Threshold



Title: Declare Global Variables

Instructions: In order to store and reuse values in our program, we will define the following variables for the following uses: <ul><li><code class="prettyprint lang-cpp">reading</code> - Defined as an integer array, the variable <code class="prettyprint lang-cpp">reading</code> will be a list that can holding 10 integer readings, which we will read and write to in a later step.</li><li><code class="prettyprint lang-cpp">finalReading</code></li><li><code class="prettyprint lang-cpp">GripPin</code> - An integer with default value set to 9. This corresponds with the grip pin position you will use on the Arduino.</li><li><code class="prettyprint lang-cpp">UpdateTime</code> - The number of milliseconds between taking another EMG reading and updating the servo motor position (based on the Degree Stop values we looked at before). This is a constant integer value, which means that it can never be changed within the program. This value should never be below 50ms, to prevent the motor from burning out.</li></ul>

Code:
int reading[10];
int finalReading;
int GripPin = 9; 



== The Setup Function ==

Title: Create Setup Function

Instructions: The <code class="prettyprint lang-cpp">setup</code> function will contain all code needed to setup the Arduino, and will be called before the <code class="prettyprint lang-cpp">loop</code> function, which we will define later. \n\nTo begin the setup function, we will open up the serial monitor at 96 BPS with the line <code class="prettyprint lang-cpp">Serial.begin(9600);</code>. Next we will instatiate the Servo variable we declared earlier with the line <code class="prettyprint lang-cpp">ServoGripper.attach(GripPin);</code>. This function call will create a new Servo for us, attached at the given pin (<code class="prettyprint lang-cpp">GripPin = 9</code>, defined earlier), which we will use later.

Code:
void setup(){
  Serial.begin(9600); //Opens up serial monitor at 96 BPS. 
  ServoGripper.attach(GripPin); //Declare the Servo to be Connected to GripPin
}



== The Loop Function ==

Title: Declaring the Loop Function

Instructions: The <code class="prettyprint lang-cpp">loop()</code> function is the main loop in the Arduino runtime. After performing the setup in the <code class="prettyprint lang-cpp">setup()</code> function, program execution starts in the <code class="prettyprint lang-cpp">loop()</code> function. The <code class="prettyprint lang-cpp">loop()</code> function will execute, and on completion will run again. We will set a 1000 MS delay (<code class="prettyprint lang-cpp">delay(1000);</code>) at the end of the function to ensure a 1 second wait time before repeating.\n\nWe will populate the commented code regions in the next steps.

Code:
void loop() {
  // Obtain Ten Readings

  // Determine Final Reading

  // Write Degree Stop

  // Print Debugging Value

  delay(1000);
}



Title: Obtain Ten Readings

Instructions: In order to determine the current value of the Servo, we will take 10 readings and determine a final reading in the next step. To take 10 readings, we will make use of the <code class="prettyprint lang-cpp">for( ... ) { ... }</code> loop statement, which will start with the variable <code class="prettyprint lang-cpp">i = 0</code>, and will execute the loop body until <code class="prettyprint lang-cpp">i < 10 == true</code>, which is the condition of the <code class="prettyprint lang-cpp">for</code> loop. At the end of each execution of the <code class="prettyprint lang-cpp">for</code> loop, <code class="prettyprint lang-cpp">i++</code> will run, incrementing the <code class="prettyprint lang-cpp">i</code> variable by one.<br /><br />The loop body will get a value from the function <code class="prettyprint lang-cpp">analogRead(EMG)</code> and assign it to the <code class="prettyprint lang-cpp">reading</code> array at the index, which is specified by the <code class="prettyprint lang-cpp">i</code> variable defined in the <code class="prettyprint lang-cpp">for</code> loop declaration. We then delay for 2 milliseconds, and repeat.

Code:
for(int i = 0; i < 10; i++){
  reading[i] = analogRead(EMG); 
  delay(2);
}



Title: Determine Final Reading

Instructions: In order to determine the value of <code class="prettyprint lang-cpp">finalReading</code> we need to iterate over all ten values in <code class="prettyprint lang-cpp">reading</code> and add them to <code class="prettyprint lang-cpp">finalReading</code> to get a running sum. After the loop has terminated, we take the average over all ten values.

Code:
for(int i = 0; i < 10; i++){ //defines assigns the sum of the ten integer "reading" variables as "finalReading"
  finalReading += reading[i];
}
finalReading /= 10;



Title: Write Degree Stop

Instructions: The <code class="prettyprint lang-cpp">if { ... } else { .. }</code> statement allows us to run code if the condition is true, otherwise run the <code class="prettyprint lang-cpp">else</code> statement.<br /><br />Here, our condition is <code class="prettyprint lang-cpp">finalReading >= Close_Threshold</code>, which checks our finalReading against the <code class="prettyprint lang-cpp">Close_Threshold</code> macro we defined earlier. If <code class="prettyprint lang-cpp">finalReading</code> is above the threshold, the hand is flexing and so we write <code class="prettyprint lang-cpp">Degree_Stop_1</code> to move the ServoGripper to the closed position. If <code class="prettyprint lang-cpp">finalReading</code> is below the threshold, we move to (or potentially remain at) <code class="prettyprint lang-cpp">Degree_Stop_2</code>.

Code:
if (finalReading >= Close_Threshold) {
    ServoGripper.write (Degree_Stop_1);
} else {
    ServoGripper.write(Degree_Stop_2); 
}




Title: Print Debugging Value

Instructions: Print out the <code class="prettyprint lang-cpp">finalReading</code> value in the Serial Monitor to check the action for debugging purposes.

Code:
Serial.print("Value = ");
Serial.println(finalReading);
