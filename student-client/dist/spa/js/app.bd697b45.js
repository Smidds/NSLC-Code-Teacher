(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["app"],{0:function(e,t,n){e.exports=n("2f39")},"2f39":function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"currentChapterIndex",function(){return O}),n.d(r,"currentPageIndex",function(){return H}),n.d(r,"furthestChapterIndex",function(){return j}),n.d(r,"furthestPageIndex",function(){return B}),n.d(r,"getChapters",function(){return $}),n.d(r,"currentQuiz",function(){return J}),n.d(r,"currentPage",function(){return K});var a={};n.r(a),n.d(a,"incrementQuestionsAnswered",function(){return Y}),n.d(a,"setQuestionsAnswered",function(){return Z}),n.d(a,"setSteps",function(){return ee}),n.d(a,"updateFurthestStep",function(){return te}),n.d(a,"updateCurrentStep",function(){return ne});var i={};n.r(i),n.d(i,"isValidStep",function(){return re}),n.d(i,"loadNextPage",function(){return ae}),n.d(i,"loadPrevPage",function(){return oe}),n.d(i,"loadStepState",function(){return ce}),n.d(i,"resetSteps",function(){return le}),n.d(i,"resetQuizzes",function(){return pe}),n.d(i,"nextQuestion",function(){return se});var o=n("deb5"),c=n.n(o),l=(n("96cf"),n("f44b")),p=n.n(l),s=(n("7d6e"),n("e54f"),n("922c"),n("62f2"),n("7e6d"),n("2b0e")),u=n("b05d"),d=n("4d5a"),h=n("9898"),f=n("f2cc"),g=n("c7a0"),m=n("2ea3"),w=n("65c6"),v=n("6ac5"),S=n("9c40"),b=n("0016"),y=n("497d"),x=n("6ab5"),_=n("033f"),C=n("e208"),R=n("cb32"),T=n("54b4"),G=n("880c"),k=n("32a7"),I=n("62cd"),Q=n("f09f"),A=n("a370"),D=n("714f"),P=n("2a19");s["a"].use(u["a"],{config:{},components:{QLayout:d["a"],QHeader:h["a"],QDrawer:f["a"],QPageContainer:g["a"],QPage:m["a"],QToolbar:w["a"],QToolbarTitle:v["a"],QBtn:S["a"],QIcon:b["a"],QList:y["a"],QItem:x["a"],QItemSection:_["a"],QItemLabel:C["a"],QAvatar:R["a"],QExpansionItem:T["a"],QCarousel:G["a"],QCarouselControl:k["a"],QCarouselSlide:I["a"],QCard:Q["a"],QCardSection:A["a"]},directives:{Ripple:D["a"]},plugins:{Notify:P["a"]}});var q=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"q-app"}},[n("router-view")],1)},E=[],M={name:"App"},N=M,V=n("2877"),z=Object(V["a"])(N,q,E,!1,null,null,null),W=z.exports,F=n("2f62"),U={chapters:[{title:"Declarations and Inclusions",pages:[{title:"Include Servo",code:"#include <Servo.h>\nServo ServoGripper;",instructions:'Include the Servo library by utilizing the <code class="prettyprint lang-cpp">#include</code> keyword.This will grant us access to a list of Servo commands to tell our Servo what to do. <br /><br /> We will also declare (but not create) a Servo object called ServoGripper. We will create that new Servo later.',quiz:{questions:[{instructions:"To include another library from a file called Math.h, what would you type?",correctAnswers:["#include <Math.h>"]},{instructions:"To declare a variable called SportsCar, of object type Car, what would you type?",correctAnswers:["Car SportsCar;","Car SportsCar"]}],questionsAnswered:0}},{title:"Create Macros",instructions:'Use the <code class="prettyprint lang-cpp">#define</code> keyword to create a new macro, which works like a variable, but doesn\'t use any computer memory to store as it will be replaced when we compile the code. Wherever the compiler sees the macro name, it will just replace the name with the value we specified here. We will be creating the following macros: <ul><li><code class="prettyprint lang-cpp">EMG</code> - Used to rename the Red/White/Black cables as "EMG" to make the code easier to read.</li><li><code class="prettyprint lang-cpp">Degree_Stop_1</code> - Our "closed" degree to stop at, 110 degrees.</li><li><code class="prettyprint lang-cpp">Degree_Stop_2</code> - Our "open" degree to stop at, 70 degrees.</li><li><code class="prettyprint lang-cpp">Close_Threshold</code> - Value that EMG must be above in order to move the gripper to Degree_Stop_1.</li></ul>',code:"#define MACRO_NAME value\n// An Example\n#define TEST_VALUE 10"},{title:"Declare Global Variables",instructions:'In order to store and reuse values in our program, we will define the following variables for the following uses: <ul><li><code class="prettyprint lang-cpp">reading</code> - Defined as an integer array, the variable <code class="prettyprint lang-cpp">reading</code> will be a list that can holding 10 integer readings, which we will read and write to in a later step.</li><li><code class="prettyprint lang-cpp">finalReading</code></li><li><code class="prettyprint lang-cpp">GripPin</code> - An integer with a default value set to 9 to represent our usage of the number 9 pin to transmit integers.</li><li><code class="prettyprint lang-cpp">UpdateTime</code> - The number of milliseconds between updating servo position. A constant integer value that can never be changed within the program, this value will prevent motor burn out.</li></ul>',code:"int reading[10];\nint finalReading;\nint GripPin = 9; \nconst int UpdateTime = 200;"},{title:"Summary",instructions:"Here is all the code you should have completed for this section.",code:"#include <Servo.h> \nServo ServoGripper;\n\n#define EMG A0\n#define Degree_Stop_1 15\n#define Degree_Stop_2 80\n#define Close_Threshold 50\n\nint reading[10];\nint finalReading;\nint GripPin = 9;\nconst int UpdateTime = 200;"}]},{title:"The Setup Function",pages:[{title:"Create The Setup Function",instructions:'The <code class="prettyprint lang-cpp">setup</code> function will contain all code needed to setup the Arduino, and will be called before the <code class="prettyprint lang-cpp">loop</code> function, which we will define later. <br /><br />To begin the setup function, we will open up the serial monitor at 96 BPS with the line <code class="prettyprint lang-cpp">Serial.begin(9600);</code>. Next we will instatiate the Servo variable we declared earlier with the line <code class="prettyprint lang-cpp">ServoGripper.attach(GripPin);</code>. This function call will create a new Servo for us, attached at the given pin (<code class="prettyprint lang-cpp">GripPin = 9</code>, defined earlier), which we will use later.',code:"void setup(){\n  Serial.begin(9600);\n  ServoGripper.attach(GripPin);\n}"}]},{title:"The Loop Function",pages:[{title:"Declaring the Loop Function",instructions:'The <code class="prettyprint lang-cpp">loop()</code> function is the main loop in the Arduino runtime. After performing the setup in the <code class="prettyprint lang-cpp">setup()</code> function, program execution starts in the <code class="prettyprint lang-cpp">loop()</code> function. The <code class="prettyprint lang-cpp">loop()</code> function will execute, and on completion will run again. We will set a 1000 MS delay (<code class="prettyprint lang-cpp">delay(1000);</code>) at the end of the function to ensure a 1 second wait time before repeating.<br /><br />We will populate the commented code regions in the next steps.',code:"void loop() {\n  // Obtain Ten Readings\n\n  // Determine Final Reading\n\n  // Write Degree Stop\n\n  // Print Debugging Value\n\n  delay(1000);\n}"},{title:"Obtain Ten Readings",instructions:'In order to determine the current value of the Servo, we will take 10 readings and determine a final reading in the next step. To take 10 readings, we will make use of the <code class="prettyprint lang-cpp">for( ... ) { ... }</code> loop statement, which will start with the variable <code class="prettyprint lang-cpp">i = 0</code>, and will execute the loop body until <code class="prettyprint lang-cpp">i < 10 == true</code>, which is the condition of the <code class="prettyprint lang-cpp">for</code> loop. At the end of each execution of the <code class="prettyprint lang-cpp">for</code> loop, <code class="prettyprint lang-cpp">i++</code> will run, incrementing the <code class="prettyprint lang-cpp">i</code> variable by one.<br /><br />The loop body will get a value from the function <code class="prettyprint lang-cpp">analogRead(EMG)</code> and assign it to the <code class="prettyprint lang-cpp">reading</code> array at the index, which is specified by the <code class="prettyprint lang-cpp">i</code> variable defined in the <code class="prettyprint lang-cpp">for</code> loop declaration. We then delay for 2 milliseconds, and repeat.',code:"for(int i = 0; i < 10; i++){\n  reading[i] = analogRead(EMG); \n  delay(2);\n}"},{title:"Determine Final Reading",instructions:'In order to determine the value of <code class="prettyprint lang-cpp">finalReading</code> we need to iterate over all ten values in <code class="prettyprint lang-cpp">reading</code> and add them to <code class="prettyprint lang-cpp">finalReading</code> to get a running sum. After the loop has terminated, we take the average over all ten values.',code:"for(int i = 0; i < 10; i++){\n  finalReading += reading[i];\n}\nfinalReading /= 10;"},{title:"Write Degree Stop",instructions:'The <code class="prettyprint lang-cpp">if { ... } else { .. }</code> statement allows us to run code if the condition is true, otherwise run the <code class="prettyprint lang-cpp">else</code> statement.<br /><br />Here, our condition is <code class="prettyprint lang-cpp">finalReading >= Close_Threshold</code>, which checks our finalReading against the <code class="prettyprint lang-cpp">Close_Threshold</code> macro we defined earlier. If <code class="prettyprint lang-cpp">finalReading</code> is above the threshold, the hand is flexing and so we write <code class="prettyprint lang-cpp">Degree_Stop_1</code> to move the ServoGripper to the closed position. If <code class="prettyprint lang-cpp">finalReading</code> is below the threshold, we move to (or potentially remain at) <code class="prettyprint lang-cpp">Degree_Stop_2</code>.',code:"if (finalReading >= Close_Threshold) {\n  ServoGripper.write (Degree_Stop_1);\n} else {\n  ServoGripper.write(Degree_Stop_2); \n}"},{title:"Print Debugging Value",instructions:'Print out the <code class="prettyprint lang-cpp">finalReading</code> value in the Serial Monitor to check the action for debugging purposes.',code:'Serial.print("Value = ");\nSerial.println(finalReading);'},{title:"Summary",instructions:"Here is all the code you should have completed for the section.",code:'void loop(){\n  for(int i = 0; i < 10; i++){\n    reading[i] = analogRead(EMG); \n    delay(2);\n  }\n\n  for(int i = 0; i < 10; i++){\n    finalReading += reading[i];\n  }\n  finalReading /= 10;\n\n  if (finalReading >= Close_Threshold){\n    ServoGripper.write (Degree_Stop_1);\n  } else {\n    ServoGripper.write(Degree_Stop_2); \n  } \n\n  Serial.print("Value = ");\n  Serial.println(finalReading);\n  delay(1000);\n}'}]},{title:"In Conclusion",pages:[{title:"Completed Program",instructions:"Here is what the final file should look like, after all steps are completed.",code:'#include <Servo.h>\nServo ServoGripper;\n\n#define EMG A0\n#define Degree_Stop_1 15\n#define Degree_Stop_2 80\n#define Close_Threshold 50\n\nint reading[10];\nint finalReading;\nint GripPin = 9;\nconst int UpdateTime = 200;\n\nvoid setup(){\n  Serial.begin(9600);\n  ServoGripper.attach(GripPin);\n}\n\nvoid loop(){\n  for(int i = 0; i < 10; i++){\n    reading[i] = analogRead(EMG); \n    delay(2);\n  }\n  \n  for(int i = 0; i < 10; i++){\n    finalReading += reading[i];\n  }\n  finalReading /= 10;\n  \n  if (finalReading >= Close_Threshold){\n    ServoGripper.write (Degree_Stop_1);\n  } else {\n    ServoGripper.write(Degree_Stop_2); \n  } \n\n  Serial.print("Value = ");\n  Serial.println(finalReading);\n  delay(1000);\n}'}]}],currentStep:null,furthestStep:null},L=U;function O(e){return e.currentStep[0]}function H(e){return e.currentStep[1]}function j(e){return e.furthestStep[0]}function B(e){return e.furthestStep[1]}function $(e){return e.chapters}function J(e){var t=K(e);return t.quiz}function K(e){var t=e.currentStep[0],n=e.currentStep[1],r=e.chapters[t];return r.pages[n]}n("c5f6");function X(e,t){var n=e[0],r=e[1],a=t[0],i=t[1];return n<a||n<=a&&r<i}function Y(e,t){var n=t[0],r=t[1];e.chapters[n].pages[r].quiz.questionsAnswered++}function Z(e,t){var n=t.step,r=t.questionsAnswered,a=n[0],i=n[1];e.chapters[a].pages[i].quiz.questionsAnswered=r}function ee(e,t){var n=t.furthestStep,r=t.currentStep;e.furthestStep=n,e.currentStep=r}function te(e,t){var n=[Number(t[0]),Number(t[1])];X(e.furthestStep,n)&&(localStorage.setItem("furthestChapter",n[0]),localStorage.setItem("furthestPage",n[1]),e.furthestStep=n)}function ne(e,t){var n=[Number(t[0]),Number(t[1])];localStorage.setItem("currentChapter",n[0]),localStorage.setItem("currentPage",n[1]),e.currentStep=n}function re(e,t){var n=e.state,r=n.furthestStep[0],a=n.furthestStep[1],i=t[0],o=t[1];return r>i||r>=i&&a>=o}function ae(e,t){return ie.apply(this,arguments)}function ie(){return ie=p()(c.a.mark(function e(t,n){var r,a,i,o,l,p;return c.a.wrap(function(e){while(1)switch(e.prev=e.next){case 0:if(r=t.state,a=t.commit,ue({state:r},n)){e.next=3;break}return e.abrupt("return",null);case 3:return i=Number(n[0]),o=Number(n[1]),l=r.chapters[i].pages.length,o+1===l?(o=0,i++):o++,p=[i,o],e.next=10,a("updateFurthestStep",p);case 10:return e.abrupt("return",p);case 11:case"end":return e.stop()}},e)})),ie.apply(this,arguments)}function oe(e,t){var n=e.state;if(!de(void 0,t))return null;var r=Number(t[0]),a=Number(t[1]);return 0===a?(r--,a=n.chapters[r].pages.length-1):a--,[r,a]}function ce(e){var t=e.state,n=e.commit,r=[Number(localStorage.getItem("furthestChapter")),Number(localStorage.getItem("furthestPage"))],a=[Number(localStorage.getItem("currentChapter")),Number(localStorage.getItem("currentPage"))];r||(r=[0,0]),a||(t.currentStep=[0,0]),n("setSteps",{furthestStep:r,currentStep:a})}function le(e){var t=e.commit;t("setSteps",{furthestStep:[0,0],currentStep:[0,0]})}function pe(e){for(var t=e.state,n=e.commit,r=0;r<t.chapters.length;r++)for(var a=0;a<t.chapters[r].pages.length;a++){var i=t.chapters[r].pages[a];i.quiz&&0!==i.quiz.questionsAnswered&&n("setQuestionsAnswered",{step:[r,a],questionsAnswered:0})}}function se(e){var t=e.state,n=e.commit;n("incrementQuestionsAnswered",t.currentStep)}function ue(e,t){var n=e.state,r=n.chapters,a=t[0],i=t[1],o=r.length-1,c=r[o].pages.length-1;return a!==o||i!==c}function de(e,t){var n=t[0],r=t[1];return 0!==n||0!==r}var he={namespaced:!0,getters:r,mutations:a,actions:i,state:L};s["a"].use(F["a"]);var fe=function(){var e=new F["a"].Store({modules:{chapters:he},strict:!1});return e},ge=n("8c4f"),me=[{path:"/",component:function(){return n.e("0b7f1ece").then(n.bind(null,"f241"))},children:[{path:"step/:chapterIndex/:pageIndex",component:function(){return n.e("7e44b039").then(n.bind(null,"a691"))},meta:{requiresStepCheck:!0}},{path:"",redirect:"step/0/0"}]}];me.push({path:"*",component:function(){return n.e("4b47640d").then(n.bind(null,"e51e"))}});var we=me;s["a"].use(ge["a"]);var ve=function(e){var t=e.store,n=new ge["a"]({scrollBehavior:function(){return{x:0,y:0}},routes:we,mode:"hash",base:""});return n.beforeEach(function(){var e=p()(c.a.mark(function e(n,r,a){var i,o,l,p,s,u,d;return c.a.wrap(function(e){while(1)switch(e.prev=e.next){case 0:if(i=t.state.chapters,i.furthestStep&&i.currentStep){e.next=4;break}return e.next=4,t.dispatch("chapters/loadStepState");case 4:if(!n.matched.some(function(e){return e.meta.requiresStepCheck})){e.next=19;break}return o=i.currentStep[0],l=i.currentStep[1],p=n.params.chapterIndex,s=n.params.pageIndex,u=[p,s],e.next=12,t.dispatch("chapters/isValidStep",u);case 12:if(d=e.sent,!d){e.next=18;break}return t.commit("chapters/updateCurrentStep",u),e.abrupt("return",a());case 18:return e.abrupt("return",a("/step/".concat(o,"/").concat(l,"/")));case 19:return e.abrupt("return",a());case 20:case"end":return e.stop()}},e)}));return function(t,n,r){return e.apply(this,arguments)}}()),n},Se=function(){var e="function"===typeof fe?fe({Vue:s["a"]}):fe,t="function"===typeof ve?ve({Vue:s["a"],store:e}):ve;e.$router=t;var n={el:"#q-app",router:t,store:e,render:function(e){return e(W)}};return{app:n,store:e,router:t}},be=n("bc3a"),ye=n.n(be),xe=function(){var e=p()(c.a.mark(function e(t){var n;return c.a.wrap(function(e){while(1)switch(e.prev=e.next){case 0:n=t.Vue,n.prototype.$axios=ye.a;case 2:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),_e=Se(),Ce=_e.app,Re=_e.store,Te=_e.router;function Ge(){return ke.apply(this,arguments)}function ke(){return ke=p()(c.a.mark(function e(){var t,n;return c.a.wrap(function(e){while(1)switch(e.prev=e.next){case 0:t=[xe],n=0;case 2:if(!(n<t.length)){e.next=20;break}if("function"===typeof t[n]){e.next=5;break}return e.abrupt("continue",17);case 5:return e.prev=5,e.next=8,t[n]({app:Ce,router:Te,store:Re,Vue:s["a"],ssrContext:null});case 8:e.next=17;break;case 10:if(e.prev=10,e.t0=e["catch"](5),!e.t0||!e.t0.url){e.next=15;break}return window.location.href=e.t0.url,e.abrupt("return");case 15:return console.error("[Quasar] boot error:",e.t0),e.abrupt("return");case 17:n++,e.next=2;break;case 20:new s["a"](Ce);case 21:case"end":return e.stop()}},e,null,[[5,10]])})),ke.apply(this,arguments)}Ge()},"7e6d":function(e,t,n){}},[[0,"runtime","vendor"]]]);